{
  "name": "react-onclickoutside",
  "version": "4.5.0",
  "description": "An onClickOutside mixin for React components",
  "main": "index.js",
  "homepage": "https://github.com/Pomax/react-onclickoutside",
  "authors": [
    "Pomax <pomax@nihongoresources.com>"
  ],
  "keywords": [
    "react",
    "onclick",
    "outside",
    "onclickoutside"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/Pomax/react-onclickoutside.git"
  },
  "bugs": {
    "url": "https://github.com/Pomax/react-onclickoutside/issues"
  },
  "readme": "# An onClickOutside mixin for React components\n\nThis is a React mixin that you can add to your React components if you want to have them listen for clicks that occur somewhere in the document, outside of the element itself (for instance, if you need to hide a menu when people click anywhere else on your page).\n\nNote that this mixin relies on the `.classList` property, which is supported by all modern browsers, but not by no longer supported browsers like IE8 or even older. For setups that need to support deprecated browsers, using something like the [MDN classlist-polyfill](https://www.npmjs.com/package/classlist-polyfill) will be necessary.\n\n## installation\n\nThere are two ways to install this mixin, depending on your development process.\n\n### NPM\n\nIf you have Node.js needs, you can install this mixin via `npm`, using:\n\n```\nnpm install react-onclickoutside --save\n```\n\n(or `--save-dev` depending on your needs). You then use it in your components as:\n\n```javascript\nvar Component = React.createClass({\n  mixins: [\n    require('react-onclickoutside')\n  ],\n\n  handleClickOutside: function(evt) {\n    // ...handling code goes here...\n  }\n});\n```\n### For the browser (not recommended)\n\nIf you have plain-old-browser needs and for some reason are unable to use the modern browserify/webpack approach to building your JS payloads, you can install this mixin via `bower`, using:\n\n```\nbower install react-onclickoutside\n```\n\nand then include it as script via:\n\n```html\n<script src=\"bower_components/react-onclickoutside/index.js\"></script>\n```\n\nThen use it as:\n\n```javascript\nvar Component = React.createClass({\n  mixins: [\n    OnClickOutside\n  ],\n\n  handleClickOutside: function(evt) {\n    // ...handling code goes here...\n  }\n});\n```\n\n## Regulate whether or not to listen for outside clicks\n\nWhen using this mixin, a component has two functions that can be used to explicitly listen for, or do nothing with, outside clicks\n\n- `enableOnClickOutside()` - Enables outside click listening by setting up the event listening bindings.\n- `disableOnClickOutside()` - Disables outside click listening by explicitly removing the event listening bindings.\n \nIn addition, you can create a component that uses this mixin such that it has the code set up and ready to go, but not listening for outside click events until you explicitly issue its `enableOnClickOutside()`, by passing in a properly called `disableOnClickOutside`:\n\n```javascript\nvar Component = React.createClass({\n  mixins: [ ... ],\n  handleClickOutside: function(evt) {\n    // ...\n  }\n});\n\nvar Container = React.createClass({\n  render: function(evt) {\n    return <Component disableOnClickOutside={true} />\n  }\n});\n```\n\n## Marking elements as \"skip over this one\" during the event loop\n\nIf you want the mixin to ignore certain elements, then add the class `ignore-react-onclickoutside` to that element and the callback won't be invoked when the click happens inside elements with that class.\n\n## ES6/2015 class support via HOC / ES7 decorators\n\nSince mixins can't be used with ES6/2015 class React components a \n[Higher-Order Component (HOC)](https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750) \nand [ES7 decorator](https://github.com/wycats/javascript-decorators) are bundled with the mixin: \n\n```javascript\nimport listensToClickOutside from 'react-onclickoutside/decorator'; \n\nclass Component extends React.Component {\n  handleClickOutside = (event) => {\n    // ...\n  }\n}\n\nexport default listensToClickOutside(Component);\n\n// OR\n\nimport listensToClickOutside from 'react-onclickoutside/decorator'; \n\n@listensToClickOutside()\nclass Component extends React.Component {\n  handleClickOutside = (event) => {\n    // ...\n  }\n}\n\nexport default Component;\n```\n\nOne difference when using the HOC/decorator compared to the mixin is that the `enableOnClickOutside()`\nand `disableOnClickOutside()` methods are not available as class methods, but rather on the `props`;\nso instead of `this.enableOnClickOutside()` you would call `this.props.enableOnClickOutside()`.\n\nIn every other respect the the mixin and HOC/decorator provides the same functionality. \n\nFor bugs and enhancements hit up https://github.com/Pomax/react-onclickoutside/issues\n\n## Version compatibility\n\nIf you still use React 0.13 or 0.12, any version up to and including 2.4 will work. Any version v4.* or above will not work due to relying on modules not introduced until React 0.14.\n\nIf you use React 0.14 or above, use v2.5 or higher, as that specifically uses `react-DOM` for the necessary DOM event bindings.\n",
  "readmeFilename": "README.md",
  "_id": "react-onclickoutside@4.5.0",
  "_from": "react-onclickoutside@^4.5.0"
}
